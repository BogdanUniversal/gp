{
    "name": "If Then Else",
    "attributes": {
        "type": "function",
        "arity": 3,
        "doc": "(function) def if_then_else(arg0: bool, arg1: float, arg2: float) -> float\nReturns one of two outputs based on the truth value of the input.\n    Args:\n        input (bool): Condition to evaluate. If True, output1 is returned; otherwise, output2 is returned.\n        output1 (Primitive): Value to return if input is True.\n        output2 (Primitive): Value to return if input is False.\n    Returns:\n        Any: output1 if input is True, otherwise output2.",
        "returnType": "float"
    },
    "children": [
        {
            "name": "<deap.gp.Terminal object at 0x000001C49B543000>"
        },
        {
            "name": "If Then Else",
            "attributes": {
                "type": "function",
                "arity": 3,
                "doc": "(function) def if_then_else(arg0: bool, arg1: float, arg2: float) -> float\nReturns one of two outputs based on the truth value of the input.\n    Args:\n        input (bool): Condition to evaluate. If True, output1 is returned; otherwise, output2 is returned.\n        output1 (Primitive): Value to return if input is True.\n        output2 (Primitive): Value to return if input is False.\n    Returns:\n        Any: output1 if input is True, otherwise output2.",
                "returnType": "float"
            },
            "children": [
                {
                    "name": "Equal",
                    "attributes": {
                        "type": "function",
                        "arity": 2,
                        "doc": "(function) def eq(arg0: float, arg1: float) -> bool\nSame as a == b.",
                        "returnType": "bool"
                    },
                    "children": [
                        {
                            "name": "Random Uniform (-1 - 1)",
                            "attributes": {
                                "type": "constant",
                                "arity": 0,
                                "returnType": "float",
                                "doc": "partial(func, *args, **keywords) - new function with partial application\n    of the given arguments and keywords.\n",
                                "value": -0.7821960677958584
                            },
                            "children": []
                        },
                        {
                            "name": "Random Pareto (1 Shape)",
                            "attributes": {
                                "type": "constant",
                                "arity": 0,
                                "returnType": "float",
                                "doc": "partial(func, *args, **keywords) - new function with partial application\n    of the given arguments and keywords.\n",
                                "value": 0.7915649186798996
                            },
                            "children": []
                        }
                    ]
                },
                {
                    "name": "Protected Division",
                    "attributes": {
                        "type": "function",
                        "arity": 2,
                        "doc": "(function) def protected_div(arg0: float, arg1: float) -> float\nSafely performs division between two numbers.\n    Divides `left` by `right` and returns the result. If a division by zero occurs,\n    returns 1 instead of raising an exception.\n    Args:\n        left (Primitive): The numerator.\n        right (Primitive): The denominator.\n    Returns:\n        Primitive: The result of the division, or 1 if `right` is zero.",
                        "returnType": "float"
                    },
                    "children": [
                        {
                            "name": "Random Normal (0 Mean)",
                            "attributes": {
                                "type": "constant",
                                "arity": 0,
                                "returnType": "float",
                                "doc": "\n        normal(loc=0.0, scale=1.0, size=None)\n\n        Draw random samples from a normal (Gaussian) distribution.\n\n        The probability density function of the normal distribution, first\n        derived by De Moivre and 200 years later by both Gauss and Laplace\n        independently [2]_, is often called the bell curve because of\n        its characteristic shape (see the example below).\n\n        The normal distributions occurs often in nature.  For example, it\n        describes the commonly occurring distribution of samples influenced\n        by a large number of tiny, random disturbances, each with its own\n        unique distribution [2]_.\n\n        .. note::\n            New code should use the `~numpy.random.Generator.normal`\n            method of a `~numpy.random.Generator` instance instead;\n            please see the :ref:`random-quick-start`.\n\n        Parameters\n        ----------\n        loc : float or array_like of floats\n            Mean (\"centre\") of the distribution.\n        scale : float or array_like of floats\n            Standard deviation (spread or \"width\") of the distribution. Must be\n            non-negative.\n        size : int or tuple of ints, optional\n            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n            ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n            a single value is returned if ``loc`` and ``scale`` are both scalars.\n            Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n\n        Returns\n        -------\n        out : ndarray or scalar\n            Drawn samples from the parameterized normal distribution.\n\n        See Also\n        --------\n        scipy.stats.norm : probability density function, distribution or\n            cumulative density function, etc.\n        random.Generator.normal: which should be used for new code.\n\n        Notes\n        -----\n        The probability density for the Gaussian distribution is\n\n        .. math:: p(x) = \\frac{1}{\\sqrt{ 2 \\pi \\sigma^2 }}\n                         e^{ - \\frac{ (x - \\mu)^2 } {2 \\sigma^2} },\n\n        where :math:`\\mu` is the mean and :math:`\\sigma` the standard\n        deviation. The square of the standard deviation, :math:`\\sigma^2`,\n        is called the variance.\n\n        The function has its peak at the mean, and its \"spread\" increases with\n        the standard deviation (the function reaches 0.607 times its maximum at\n        :math:`x + \\sigma` and :math:`x - \\sigma` [2]_).  This implies that\n        normal is more likely to return samples lying close to the mean, rather\n        than those far away.\n\n        References\n        ----------\n        .. [1] Wikipedia, \"Normal distribution\",\n               https://en.wikipedia.org/wiki/Normal_distribution\n        .. [2] P. R. Peebles Jr., \"Central Limit Theorem\" in \"Probability,\n               Random Variables and Random Signal Principles\", 4th ed., 2001,\n               pp. 51, 51, 125.\n\n        Examples\n        --------\n        Draw samples from the distribution:\n\n        >>> mu, sigma = 0, 0.1 # mean and standard deviation\n        >>> s = np.random.normal(mu, sigma, 1000)\n\n        Verify the mean and the variance:\n\n        >>> abs(mu - np.mean(s))\n        0.0  # may vary\n\n        >>> abs(sigma - np.std(s, ddof=1))\n        0.1  # may vary\n\n        Display the histogram of the samples, along with\n        the probability density function:\n\n        >>> import matplotlib.pyplot as plt\n        >>> count, bins, ignored = plt.hist(s, 30, density=True)\n        >>> plt.plot(bins, 1/(sigma * np.sqrt(2 * np.pi)) *\n        ...                np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n        ...          linewidth=2, color='r')\n        >>> plt.show()\n\n        Two-by-four array of samples from the normal distribution with\n        mean 3 and standard deviation 2.5:\n\n        >>> np.random.normal(3, 2.5, size=(2, 4))\n        array([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random\n               [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random\n\n        ",
                                "value": -0.18659328000908434
                            },
                            "children": []
                        },
                        {
                            "name": "Random Pareto (1 Shape)",
                            "attributes": {
                                "type": "constant",
                                "arity": 0,
                                "returnType": "float",
                                "doc": "partial(func, *args, **keywords) - new function with partial application\n    of the given arguments and keywords.\n",
                                "value": 0.25308040821154765
                            },
                            "children": []
                        }
                    ]
                },
                {
                    "name": "Addition",
                    "attributes": {
                        "type": "function",
                        "arity": 2,
                        "doc": "(function) def add(arg0: float, arg1: float) -> float\nSame as a + b.",
                        "returnType": "float"
                    },
                    "children": [
                        {
                            "name": "IN1"
                        },
                        {
                            "name": "Random Poisson (2 Lam)",
                            "attributes": {
                                "type": "constant",
                                "arity": 0,
                                "returnType": "float",
                                "doc": "partial(func, *args, **keywords) - new function with partial application\n    of the given arguments and keywords.\n",
                                "value": 1
                            },
                            "children": []
                        }
                    ]
                }
            ]
        },
        {
            "name": "If Then Else",
            "attributes": {
                "type": "function",
                "arity": 3,
                "doc": "(function) def if_then_else(arg0: bool, arg1: float, arg2: float) -> float\nReturns one of two outputs based on the truth value of the input.\n    Args:\n        input (bool): Condition to evaluate. If True, output1 is returned; otherwise, output2 is returned.\n        output1 (Primitive): Value to return if input is True.\n        output2 (Primitive): Value to return if input is False.\n    Returns:\n        Any: output1 if input is True, otherwise output2.",
                "returnType": "float"
            },
            "children": [
                {
                    "name": "<deap.gp.Terminal object at 0x000001C49B543000>"
                },
                {
                    "name": "If Then Else",
                    "attributes": {
                        "type": "function",
                        "arity": 3,
                        "doc": "(function) def if_then_else(arg0: bool, arg1: float, arg2: float) -> float\nReturns one of two outputs based on the truth value of the input.\n    Args:\n        input (bool): Condition to evaluate. If True, output1 is returned; otherwise, output2 is returned.\n        output1 (Primitive): Value to return if input is True.\n        output2 (Primitive): Value to return if input is False.\n    Returns:\n        Any: output1 if input is True, otherwise output2.",
                        "returnType": "float"
                    },
                    "children": [
                        {
                            "name": "Lower Equal",
                            "attributes": {
                                "type": "function",
                                "arity": 2,
                                "doc": "(function) def le(arg0: float, arg1: float) -> bool\nSame as a <= b.",
                                "returnType": "bool"
                            },
                            "children": [
                                {
                                    "name": "If Then Else",
                                    "attributes": {
                                        "type": "function",
                                        "arity": 3,
                                        "doc": "(function) def if_then_else(arg0: bool, arg1: float, arg2: float) -> float\nReturns one of two outputs based on the truth value of the input.\n    Args:\n        input (bool): Condition to evaluate. If True, output1 is returned; otherwise, output2 is returned.\n        output1 (Primitive): Value to return if input is True.\n        output2 (Primitive): Value to return if input is False.\n    Returns:\n        Any: output1 if input is True, otherwise output2.",
                                        "returnType": "float"
                                    },
                                    "children": [
                                        {
                                            "name": "<deap.gp.Terminal object at 0x000001C49B543040>"
                                        },
                                        {
                                            "name": "IN3"
                                        },
                                        {
                                            "name": "IN3"
                                        }
                                    ]
                                },
                                {
                                    "name": "Protected Division",
                                    "attributes": {
                                        "type": "function",
                                        "arity": 2,
                                        "doc": "(function) def protected_div(arg0: float, arg1: float) -> float\nSafely performs division between two numbers.\n    Divides `left` by `right` and returns the result. If a division by zero occurs,\n    returns 1 instead of raising an exception.\n    Args:\n        left (Primitive): The numerator.\n        right (Primitive): The denominator.\n    Returns:\n        Primitive: The result of the division, or 1 if `right` is zero.",
                                        "returnType": "float"
                                    },
                                    "children": [
                                        {
                                            "name": "IN2"
                                        },
                                        {
                                            "name": "Random Normal (0 Mean)",
                                            "attributes": {
                                                "type": "constant",
                                                "arity": 0,
                                                "returnType": "float",
                                                "doc": "\n        normal(loc=0.0, scale=1.0, size=None)\n\n        Draw random samples from a normal (Gaussian) distribution.\n\n        The probability density function of the normal distribution, first\n        derived by De Moivre and 200 years later by both Gauss and Laplace\n        independently [2]_, is often called the bell curve because of\n        its characteristic shape (see the example below).\n\n        The normal distributions occurs often in nature.  For example, it\n        describes the commonly occurring distribution of samples influenced\n        by a large number of tiny, random disturbances, each with its own\n        unique distribution [2]_.\n\n        .. note::\n            New code should use the `~numpy.random.Generator.normal`\n            method of a `~numpy.random.Generator` instance instead;\n            please see the :ref:`random-quick-start`.\n\n        Parameters\n        ----------\n        loc : float or array_like of floats\n            Mean (\"centre\") of the distribution.\n        scale : float or array_like of floats\n            Standard deviation (spread or \"width\") of the distribution. Must be\n            non-negative.\n        size : int or tuple of ints, optional\n            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n            ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n            a single value is returned if ``loc`` and ``scale`` are both scalars.\n            Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n\n        Returns\n        -------\n        out : ndarray or scalar\n            Drawn samples from the parameterized normal distribution.\n\n        See Also\n        --------\n        scipy.stats.norm : probability density function, distribution or\n            cumulative density function, etc.\n        random.Generator.normal: which should be used for new code.\n\n        Notes\n        -----\n        The probability density for the Gaussian distribution is\n\n        .. math:: p(x) = \\frac{1}{\\sqrt{ 2 \\pi \\sigma^2 }}\n                         e^{ - \\frac{ (x - \\mu)^2 } {2 \\sigma^2} },\n\n        where :math:`\\mu` is the mean and :math:`\\sigma` the standard\n        deviation. The square of the standard deviation, :math:`\\sigma^2`,\n        is called the variance.\n\n        The function has its peak at the mean, and its \"spread\" increases with\n        the standard deviation (the function reaches 0.607 times its maximum at\n        :math:`x + \\sigma` and :math:`x - \\sigma` [2]_).  This implies that\n        normal is more likely to return samples lying close to the mean, rather\n        than those far away.\n\n        References\n        ----------\n        .. [1] Wikipedia, \"Normal distribution\",\n               https://en.wikipedia.org/wiki/Normal_distribution\n        .. [2] P. R. Peebles Jr., \"Central Limit Theorem\" in \"Probability,\n               Random Variables and Random Signal Principles\", 4th ed., 2001,\n               pp. 51, 51, 125.\n\n        Examples\n        --------\n        Draw samples from the distribution:\n\n        >>> mu, sigma = 0, 0.1 # mean and standard deviation\n        >>> s = np.random.normal(mu, sigma, 1000)\n\n        Verify the mean and the variance:\n\n        >>> abs(mu - np.mean(s))\n        0.0  # may vary\n\n        >>> abs(sigma - np.std(s, ddof=1))\n        0.1  # may vary\n\n        Display the histogram of the samples, along with\n        the probability density function:\n\n        >>> import matplotlib.pyplot as plt\n        >>> count, bins, ignored = plt.hist(s, 30, density=True)\n        >>> plt.plot(bins, 1/(sigma * np.sqrt(2 * np.pi)) *\n        ...                np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n        ...          linewidth=2, color='r')\n        >>> plt.show()\n\n        Two-by-four array of samples from the normal distribution with\n        mean 3 and standard deviation 2.5:\n\n        >>> np.random.normal(3, 2.5, size=(2, 4))\n        array([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random\n               [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random\n\n        ",
                                                "value": 0.5020896274402716
                                            },
                                            "children": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "Multiplication",
                            "attributes": {
                                "type": "function",
                                "arity": 2,
                                "doc": "(function) def mul(arg0: float, arg1: float) -> float\nSame as a * b.",
                                "returnType": "float"
                            },
                            "children": [
                                {
                                    "name": "Addition",
                                    "attributes": {
                                        "type": "function",
                                        "arity": 2,
                                        "doc": "(function) def add(arg0: float, arg1: float) -> float\nSame as a + b.",
                                        "returnType": "float"
                                    },
                                    "children": [
                                        {
                                            "name": "Random Uniform (-1 - 1)",
                                            "attributes": {
                                                "type": "constant",
                                                "arity": 0,
                                                "returnType": "float",
                                                "doc": "partial(func, *args, **keywords) - new function with partial application\n    of the given arguments and keywords.\n",
                                                "value": 0.3321903888593152
                                            },
                                            "children": []
                                        },
                                        {
                                            "name": "IN4"
                                        }
                                    ]
                                },
                                {
                                    "name": "If Then Else",
                                    "attributes": {
                                        "type": "function",
                                        "arity": 3,
                                        "doc": "(function) def if_then_else(arg0: bool, arg1: float, arg2: float) -> float\nReturns one of two outputs based on the truth value of the input.\n    Args:\n        input (bool): Condition to evaluate. If True, output1 is returned; otherwise, output2 is returned.\n        output1 (Primitive): Value to return if input is True.\n        output2 (Primitive): Value to return if input is False.\n    Returns:\n        Any: output1 if input is True, otherwise output2.",
                                        "returnType": "float"
                                    },
                                    "children": [
                                        {
                                            "name": "<deap.gp.Terminal object at 0x000001C49B543040>"
                                        },
                                        {
                                            "name": "IN2"
                                        },
                                        {
                                            "name": "IN0"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "Multiplication",
                            "attributes": {
                                "type": "function",
                                "arity": 2,
                                "doc": "(function) def mul(arg0: float, arg1: float) -> float\nSame as a * b.",
                                "returnType": "float"
                            },
                            "children": [
                                {
                                    "name": "If Then Else",
                                    "attributes": {
                                        "type": "function",
                                        "arity": 3,
                                        "doc": "(function) def if_then_else(arg0: bool, arg1: float, arg2: float) -> float\nReturns one of two outputs based on the truth value of the input.\n    Args:\n        input (bool): Condition to evaluate. If True, output1 is returned; otherwise, output2 is returned.\n        output1 (Primitive): Value to return if input is True.\n        output2 (Primitive): Value to return if input is False.\n    Returns:\n        Any: output1 if input is True, otherwise output2.",
                                        "returnType": "float"
                                    },
                                    "children": [
                                        {
                                            "name": "<deap.gp.Terminal object at 0x000001C49B543040>"
                                        },
                                        {
                                            "name": "Random Poisson (2 Lam)",
                                            "attributes": {
                                                "type": "constant",
                                                "arity": 0,
                                                "returnType": "float",
                                                "doc": "partial(func, *args, **keywords) - new function with partial application\n    of the given arguments and keywords.\n",
                                                "value": 1
                                            },
                                            "children": []
                                        },
                                        {
                                            "name": "<deap.gp.Terminal object at 0x000001C49B543100>"
                                        }
                                    ]
                                },
                                {
                                    "name": "Substraction",
                                    "attributes": {
                                        "type": "function",
                                        "arity": 2,
                                        "doc": "(function) def sub(arg0: float, arg1: float) -> float\nSame as a - b.",
                                        "returnType": "float"
                                    },
                                    "children": [
                                        {
                                            "name": "IN2"
                                        },
                                        {
                                            "name": "<deap.gp.Terminal object at 0x000001C49B543100>"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Addition",
                    "attributes": {
                        "type": "function",
                        "arity": 2,
                        "doc": "(function) def add(arg0: float, arg1: float) -> float\nSame as a + b.",
                        "returnType": "float"
                    },
                    "children": [
                        {
                            "name": "Addition",
                            "attributes": {
                                "type": "function",
                                "arity": 2,
                                "doc": "(function) def add(arg0: float, arg1: float) -> float\nSame as a + b.",
                                "returnType": "float"
                            },
                            "children": [
                                {
                                    "name": "IN2"
                                },
                                {
                                    "name": "IN3"
                                }
                            ]
                        },
                        {
                            "name": "Addition",
                            "attributes": {
                                "type": "function",
                                "arity": 2,
                                "doc": "(function) def add(arg0: float, arg1: float) -> float\nSame as a + b.",
                                "returnType": "float"
                            },
                            "children": [
                                {
                                    "name": "Addition",
                                    "attributes": {
                                        "type": "function",
                                        "arity": 2,
                                        "doc": "(function) def add(arg0: float, arg1: float) -> float\nSame as a + b.",
                                        "returnType": "float"
                                    },
                                    "children": [
                                        {
                                            "name": "IN1"
                                        },
                                        {
                                            "name": "Multiplication",
                                            "attributes": {
                                                "type": "function",
                                                "arity": 2,
                                                "doc": "(function) def mul(arg0: float, arg1: float) -> float\nSame as a * b.",
                                                "returnType": "float"
                                            },
                                            "children": [
                                                {
                                                    "name": "IN3"
                                                },
                                                {
                                                    "name": "Random Poisson (2 Lam)",
                                                    "attributes": {
                                                        "type": "constant",
                                                        "arity": 0,
                                                        "returnType": "float",
                                                        "doc": "partial(func, *args, **keywords) - new function with partial application\n    of the given arguments and keywords.\n",
                                                        "value": 2
                                                    },
                                                    "children": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "name": "If Then Else",
                                    "attributes": {
                                        "type": "function",
                                        "arity": 3,
                                        "doc": "(function) def if_then_else(arg0: bool, arg1: float, arg2: float) -> float\nReturns one of two outputs based on the truth value of the input.\n    Args:\n        input (bool): Condition to evaluate. If True, output1 is returned; otherwise, output2 is returned.\n        output1 (Primitive): Value to return if input is True.\n        output2 (Primitive): Value to return if input is False.\n    Returns:\n        Any: output1 if input is True, otherwise output2.",
                                        "returnType": "float"
                                    },
                                    "children": [
                                        {
                                            "name": "<deap.gp.Terminal object at 0x000001C49B543000>"
                                        },
                                        {
                                            "name": "Random Uniform (0 - 100)",
                                            "attributes": {
                                                "type": "constant",
                                                "arity": 0,
                                                "returnType": "float",
                                                "doc": "partial(func, *args, **keywords) - new function with partial application\n    of the given arguments and keywords.\n",
                                                "value": 32.85925193703469
                                            },
                                            "children": []
                                        },
                                        {
                                            "name": "IN3"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}