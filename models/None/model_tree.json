{
    "name": "Multiplication",
    "attributes": {
        "type": "primitive",
        "arity": 2,
        "doc": "(function) def mul(arg0: float, arg1: float) -> float\nSame as a * b.",
        "returnType": "float"
    },
    "children": [
        {
            "name": "Substraction",
            "attributes": {
                "type": "primitive",
                "arity": 2,
                "doc": "(function) def sub(arg0: float, arg1: float) -> float\nSame as a - b.",
                "returnType": "float"
            },
            "children": [
                {
                    "name": "Substraction",
                    "attributes": {
                        "type": "primitive",
                        "arity": 2,
                        "doc": "(function) def sub(arg0: float, arg1: float) -> float\nSame as a - b.",
                        "returnType": "float"
                    },
                    "children": [
                        {
                            "name": "Random Uniform (-1 - 1)",
                            "attributes": {
                                "type": "ephemeral",
                                "arity": 0,
                                "returnType": "float",
                                "doc": "\n        uniform(low=0.0, high=1.0, size=None)\n\n        Draw samples from a uniform distribution.\n\n        Samples are uniformly distributed over the half-open interval\n        ``[low, high)`` (includes low, but excludes high).  In other words,\n        any value within the given interval is equally likely to be drawn\n        by `uniform`.\n\n        .. note::\n            New code should use the `~numpy.random.Generator.uniform`\n            method of a `~numpy.random.Generator` instance instead;\n            please see the :ref:`random-quick-start`.\n\n        Parameters\n        ----------\n        low : float or array_like of floats, optional\n            Lower boundary of the output interval.  All values generated will be\n            greater than or equal to low.  The default value is 0.\n        high : float or array_like of floats\n            Upper boundary of the output interval.  All values generated will be\n            less than or equal to high.  The high limit may be included in the \n            returned array of floats due to floating-point rounding in the \n            equation ``low + (high-low) * random_sample()``.  The default value \n            is 1.0.\n        size : int or tuple of ints, optional\n            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n            ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n            a single value is returned if ``low`` and ``high`` are both scalars.\n            Otherwise, ``np.broadcast(low, high).size`` samples are drawn.\n\n        Returns\n        -------\n        out : ndarray or scalar\n            Drawn samples from the parameterized uniform distribution.\n\n        See Also\n        --------\n        randint : Discrete uniform distribution, yielding integers.\n        random_integers : Discrete uniform distribution over the closed\n                          interval ``[low, high]``.\n        random_sample : Floats uniformly distributed over ``[0, 1)``.\n        random : Alias for `random_sample`.\n        rand : Convenience function that accepts dimensions as input, e.g.,\n               ``rand(2,2)`` would generate a 2-by-2 array of floats,\n               uniformly distributed over ``[0, 1)``.\n        random.Generator.uniform: which should be used for new code.\n\n        Notes\n        -----\n        The probability density function of the uniform distribution is\n\n        .. math:: p(x) = \\frac{1}{b - a}\n\n        anywhere within the interval ``[a, b)``, and zero elsewhere.\n\n        When ``high`` == ``low``, values of ``low`` will be returned.\n        If ``high`` < ``low``, the results are officially undefined\n        and may eventually raise an error, i.e. do not rely on this\n        function to behave when passed arguments satisfying that\n        inequality condition. The ``high`` limit may be included in the\n        returned array of floats due to floating-point rounding in the\n        equation ``low + (high-low) * random_sample()``. For example:\n\n        >>> x = np.float32(5*0.99999999)\n        >>> x\n        5.0\n\n\n        Examples\n        --------\n        Draw samples from the distribution:\n\n        >>> s = np.random.uniform(-1,0,1000)\n\n        All values are within the given interval:\n\n        >>> np.all(s >= -1)\n        True\n        >>> np.all(s < 0)\n        True\n\n        Display the histogram of the samples, along with the\n        probability density function:\n\n        >>> import matplotlib.pyplot as plt\n        >>> count, bins, ignored = plt.hist(s, 15, density=True)\n        >>> plt.plot(bins, np.ones_like(bins), linewidth=2, color='r')\n        >>> plt.show()\n\n        ",
                                "value": -0.06351056688364531
                            }
                        },
                        {
                            "name": "If Then Else",
                            "attributes": {
                                "type": "primitive",
                                "arity": 3,
                                "doc": "(function) def if_then_else(arg0: bool, arg1: float, arg2: float) -> float\nReturns one of two outputs based on the truth value of the input.\n    Args:\n        arg0 (bool): Condition to evaluate. If True, arg1 is returned; otherwise, arg2 is returned.\n        arg1 (Primitive): Value to return if input is True.\n        arg2 (Primitive): Value to return if input is False.\n    Returns:\n        Any: output1 if input is True, otherwise arg2.",
                                "returnType": "float"
                            },
                            "children": [
                                {
                                    "name": "False",
                                    "attributes": {
                                        "type": "constant"
                                    }
                                },
                                {
                                    "name": "Random Poisson (2 Lam)",
                                    "attributes": {
                                        "type": "ephemeral",
                                        "arity": 0,
                                        "returnType": "float",
                                        "doc": "\n        poisson(lam=1.0, size=None)\n\n        Draw samples from a Poisson distribution.\n\n        The Poisson distribution is the limit of the binomial distribution\n        for large N.\n\n        .. note::\n            New code should use the `~numpy.random.Generator.poisson`\n            method of a `~numpy.random.Generator` instance instead;\n            please see the :ref:`random-quick-start`.\n\n        Parameters\n        ----------\n        lam : float or array_like of floats\n            Expected number of events occurring in a fixed-time interval,\n            must be >= 0. A sequence must be broadcastable over the requested\n            size.\n        size : int or tuple of ints, optional\n            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n            ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n            a single value is returned if ``lam`` is a scalar. Otherwise,\n            ``np.array(lam).size`` samples are drawn.\n\n        Returns\n        -------\n        out : ndarray or scalar\n            Drawn samples from the parameterized Poisson distribution.\n\n        See Also\n        --------\n        random.Generator.poisson: which should be used for new code.\n\n        Notes\n        -----\n        The Poisson distribution\n\n        .. math:: f(k; \\lambda)=\\frac{\\lambda^k e^{-\\lambda}}{k!}\n\n        For events with an expected separation :math:`\\lambda` the Poisson\n        distribution :math:`f(k; \\lambda)` describes the probability of\n        :math:`k` events occurring within the observed\n        interval :math:`\\lambda`.\n\n        Because the output is limited to the range of the C int64 type, a\n        ValueError is raised when `lam` is within 10 sigma of the maximum\n        representable value.\n\n        References\n        ----------\n        .. [1] Weisstein, Eric W. \"Poisson Distribution.\"\n               From MathWorld--A Wolfram Web Resource.\n               https://mathworld.wolfram.com/PoissonDistribution.html\n        .. [2] Wikipedia, \"Poisson distribution\",\n               https://en.wikipedia.org/wiki/Poisson_distribution\n\n        Examples\n        --------\n        Draw samples from the distribution:\n\n        >>> import numpy as np\n        >>> s = np.random.poisson(5, 10000)\n\n        Display histogram of the sample:\n\n        >>> import matplotlib.pyplot as plt\n        >>> count, bins, ignored = plt.hist(s, 14, density=True)\n        >>> plt.show()\n\n        Draw each 100 values for lambda 100 and 500:\n\n        >>> s = np.random.poisson(lam=(100., 500.), size=(100, 2))\n\n        ",
                                        "value": 3
                                    }
                                },
                                {
                                    "name": "Random Uniform (0 - 100)",
                                    "attributes": {
                                        "type": "ephemeral",
                                        "arity": 0,
                                        "returnType": "float",
                                        "doc": "\n        uniform(low=0.0, high=1.0, size=None)\n\n        Draw samples from a uniform distribution.\n\n        Samples are uniformly distributed over the half-open interval\n        ``[low, high)`` (includes low, but excludes high).  In other words,\n        any value within the given interval is equally likely to be drawn\n        by `uniform`.\n\n        .. note::\n            New code should use the `~numpy.random.Generator.uniform`\n            method of a `~numpy.random.Generator` instance instead;\n            please see the :ref:`random-quick-start`.\n\n        Parameters\n        ----------\n        low : float or array_like of floats, optional\n            Lower boundary of the output interval.  All values generated will be\n            greater than or equal to low.  The default value is 0.\n        high : float or array_like of floats\n            Upper boundary of the output interval.  All values generated will be\n            less than or equal to high.  The high limit may be included in the \n            returned array of floats due to floating-point rounding in the \n            equation ``low + (high-low) * random_sample()``.  The default value \n            is 1.0.\n        size : int or tuple of ints, optional\n            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n            ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n            a single value is returned if ``low`` and ``high`` are both scalars.\n            Otherwise, ``np.broadcast(low, high).size`` samples are drawn.\n\n        Returns\n        -------\n        out : ndarray or scalar\n            Drawn samples from the parameterized uniform distribution.\n\n        See Also\n        --------\n        randint : Discrete uniform distribution, yielding integers.\n        random_integers : Discrete uniform distribution over the closed\n                          interval ``[low, high]``.\n        random_sample : Floats uniformly distributed over ``[0, 1)``.\n        random : Alias for `random_sample`.\n        rand : Convenience function that accepts dimensions as input, e.g.,\n               ``rand(2,2)`` would generate a 2-by-2 array of floats,\n               uniformly distributed over ``[0, 1)``.\n        random.Generator.uniform: which should be used for new code.\n\n        Notes\n        -----\n        The probability density function of the uniform distribution is\n\n        .. math:: p(x) = \\frac{1}{b - a}\n\n        anywhere within the interval ``[a, b)``, and zero elsewhere.\n\n        When ``high`` == ``low``, values of ``low`` will be returned.\n        If ``high`` < ``low``, the results are officially undefined\n        and may eventually raise an error, i.e. do not rely on this\n        function to behave when passed arguments satisfying that\n        inequality condition. The ``high`` limit may be included in the\n        returned array of floats due to floating-point rounding in the\n        equation ``low + (high-low) * random_sample()``. For example:\n\n        >>> x = np.float32(5*0.99999999)\n        >>> x\n        5.0\n\n\n        Examples\n        --------\n        Draw samples from the distribution:\n\n        >>> s = np.random.uniform(-1,0,1000)\n\n        All values are within the given interval:\n\n        >>> np.all(s >= -1)\n        True\n        >>> np.all(s < 0)\n        True\n\n        Display the histogram of the samples, along with the\n        probability density function:\n\n        >>> import matplotlib.pyplot as plt\n        >>> count, bins, ignored = plt.hist(s, 15, density=True)\n        >>> plt.plot(bins, np.ones_like(bins), linewidth=2, color='r')\n        >>> plt.show()\n\n        ",
                                        "value": 0.6315229142898504
                                    }
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "1",
                    "attributes": {
                        "type": "constant"
                    }
                }
            ]
        },
        {
            "name": "If Then Else",
            "attributes": {
                "type": "primitive",
                "arity": 3,
                "doc": "(function) def if_then_else(arg0: bool, arg1: float, arg2: float) -> float\nReturns one of two outputs based on the truth value of the input.\n    Args:\n        arg0 (bool): Condition to evaluate. If True, arg1 is returned; otherwise, arg2 is returned.\n        arg1 (Primitive): Value to return if input is True.\n        arg2 (Primitive): Value to return if input is False.\n    Returns:\n        Any: output1 if input is True, otherwise arg2.",
                "returnType": "float"
            },
            "children": [
                {
                    "name": "False",
                    "attributes": {
                        "type": "constant"
                    }
                },
                {
                    "name": "If Then Else",
                    "attributes": {
                        "type": "primitive",
                        "arity": 3,
                        "doc": "(function) def if_then_else(arg0: bool, arg1: float, arg2: float) -> float\nReturns one of two outputs based on the truth value of the input.\n    Args:\n        arg0 (bool): Condition to evaluate. If True, arg1 is returned; otherwise, arg2 is returned.\n        arg1 (Primitive): Value to return if input is True.\n        arg2 (Primitive): Value to return if input is False.\n    Returns:\n        Any: output1 if input is True, otherwise arg2.",
                        "returnType": "float"
                    },
                    "children": [
                        {
                            "name": "And",
                            "attributes": {
                                "type": "primitive",
                                "arity": 2,
                                "doc": "(function) def and_(arg0: bool, arg1: bool) -> bool\nSame as a & b.",
                                "returnType": "bool"
                            },
                            "children": [
                                {
                                    "name": "False",
                                    "attributes": {
                                        "type": "constant"
                                    }
                                },
                                {
                                    "name": "True",
                                    "attributes": {
                                        "type": "constant"
                                    }
                                }
                            ]
                        },
                        {
                            "name": "Multiplication",
                            "attributes": {
                                "type": "primitive",
                                "arity": 2,
                                "doc": "(function) def mul(arg0: float, arg1: float) -> float\nSame as a * b.",
                                "returnType": "float"
                            },
                            "children": [
                                {
                                    "name": "IN_REDUCED_lips_thin_nose_long_nose_wide_distance_nose_to_lip_long_0",
                                    "attributes": {
                                        "type": "variable"
                                    }
                                },
                                {
                                    "name": "-1",
                                    "attributes": {
                                        "type": "constant"
                                    }
                                }
                            ]
                        },
                        {
                            "name": "Random Uniform (-1 - 1)",
                            "attributes": {
                                "type": "ephemeral",
                                "arity": 0,
                                "returnType": "float",
                                "doc": "\n        uniform(low=0.0, high=1.0, size=None)\n\n        Draw samples from a uniform distribution.\n\n        Samples are uniformly distributed over the half-open interval\n        ``[low, high)`` (includes low, but excludes high).  In other words,\n        any value within the given interval is equally likely to be drawn\n        by `uniform`.\n\n        .. note::\n            New code should use the `~numpy.random.Generator.uniform`\n            method of a `~numpy.random.Generator` instance instead;\n            please see the :ref:`random-quick-start`.\n\n        Parameters\n        ----------\n        low : float or array_like of floats, optional\n            Lower boundary of the output interval.  All values generated will be\n            greater than or equal to low.  The default value is 0.\n        high : float or array_like of floats\n            Upper boundary of the output interval.  All values generated will be\n            less than or equal to high.  The high limit may be included in the \n            returned array of floats due to floating-point rounding in the \n            equation ``low + (high-low) * random_sample()``.  The default value \n            is 1.0.\n        size : int or tuple of ints, optional\n            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n            ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n            a single value is returned if ``low`` and ``high`` are both scalars.\n            Otherwise, ``np.broadcast(low, high).size`` samples are drawn.\n\n        Returns\n        -------\n        out : ndarray or scalar\n            Drawn samples from the parameterized uniform distribution.\n\n        See Also\n        --------\n        randint : Discrete uniform distribution, yielding integers.\n        random_integers : Discrete uniform distribution over the closed\n                          interval ``[low, high]``.\n        random_sample : Floats uniformly distributed over ``[0, 1)``.\n        random : Alias for `random_sample`.\n        rand : Convenience function that accepts dimensions as input, e.g.,\n               ``rand(2,2)`` would generate a 2-by-2 array of floats,\n               uniformly distributed over ``[0, 1)``.\n        random.Generator.uniform: which should be used for new code.\n\n        Notes\n        -----\n        The probability density function of the uniform distribution is\n\n        .. math:: p(x) = \\frac{1}{b - a}\n\n        anywhere within the interval ``[a, b)``, and zero elsewhere.\n\n        When ``high`` == ``low``, values of ``low`` will be returned.\n        If ``high`` < ``low``, the results are officially undefined\n        and may eventually raise an error, i.e. do not rely on this\n        function to behave when passed arguments satisfying that\n        inequality condition. The ``high`` limit may be included in the\n        returned array of floats due to floating-point rounding in the\n        equation ``low + (high-low) * random_sample()``. For example:\n\n        >>> x = np.float32(5*0.99999999)\n        >>> x\n        5.0\n\n\n        Examples\n        --------\n        Draw samples from the distribution:\n\n        >>> s = np.random.uniform(-1,0,1000)\n\n        All values are within the given interval:\n\n        >>> np.all(s >= -1)\n        True\n        >>> np.all(s < 0)\n        True\n\n        Display the histogram of the samples, along with the\n        probability density function:\n\n        >>> import matplotlib.pyplot as plt\n        >>> count, bins, ignored = plt.hist(s, 15, density=True)\n        >>> plt.plot(bins, np.ones_like(bins), linewidth=2, color='r')\n        >>> plt.show()\n\n        ",
                                "value": -0.06351056688364531
                            }
                        }
                    ]
                },
                {
                    "name": "Substraction",
                    "attributes": {
                        "type": "primitive",
                        "arity": 2,
                        "doc": "(function) def sub(arg0: float, arg1: float) -> float\nSame as a - b.",
                        "returnType": "float"
                    },
                    "children": [
                        {
                            "name": "Addition",
                            "attributes": {
                                "type": "primitive",
                                "arity": 2,
                                "doc": "(function) def add(arg0: float, arg1: float) -> float\nSame as a + b.",
                                "returnType": "float"
                            },
                            "children": [
                                {
                                    "name": "Random Uniform (0 - 100)",
                                    "attributes": {
                                        "type": "ephemeral",
                                        "arity": 0,
                                        "returnType": "float",
                                        "doc": "\n        uniform(low=0.0, high=1.0, size=None)\n\n        Draw samples from a uniform distribution.\n\n        Samples are uniformly distributed over the half-open interval\n        ``[low, high)`` (includes low, but excludes high).  In other words,\n        any value within the given interval is equally likely to be drawn\n        by `uniform`.\n\n        .. note::\n            New code should use the `~numpy.random.Generator.uniform`\n            method of a `~numpy.random.Generator` instance instead;\n            please see the :ref:`random-quick-start`.\n\n        Parameters\n        ----------\n        low : float or array_like of floats, optional\n            Lower boundary of the output interval.  All values generated will be\n            greater than or equal to low.  The default value is 0.\n        high : float or array_like of floats\n            Upper boundary of the output interval.  All values generated will be\n            less than or equal to high.  The high limit may be included in the \n            returned array of floats due to floating-point rounding in the \n            equation ``low + (high-low) * random_sample()``.  The default value \n            is 1.0.\n        size : int or tuple of ints, optional\n            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n            ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n            a single value is returned if ``low`` and ``high`` are both scalars.\n            Otherwise, ``np.broadcast(low, high).size`` samples are drawn.\n\n        Returns\n        -------\n        out : ndarray or scalar\n            Drawn samples from the parameterized uniform distribution.\n\n        See Also\n        --------\n        randint : Discrete uniform distribution, yielding integers.\n        random_integers : Discrete uniform distribution over the closed\n                          interval ``[low, high]``.\n        random_sample : Floats uniformly distributed over ``[0, 1)``.\n        random : Alias for `random_sample`.\n        rand : Convenience function that accepts dimensions as input, e.g.,\n               ``rand(2,2)`` would generate a 2-by-2 array of floats,\n               uniformly distributed over ``[0, 1)``.\n        random.Generator.uniform: which should be used for new code.\n\n        Notes\n        -----\n        The probability density function of the uniform distribution is\n\n        .. math:: p(x) = \\frac{1}{b - a}\n\n        anywhere within the interval ``[a, b)``, and zero elsewhere.\n\n        When ``high`` == ``low``, values of ``low`` will be returned.\n        If ``high`` < ``low``, the results are officially undefined\n        and may eventually raise an error, i.e. do not rely on this\n        function to behave when passed arguments satisfying that\n        inequality condition. The ``high`` limit may be included in the\n        returned array of floats due to floating-point rounding in the\n        equation ``low + (high-low) * random_sample()``. For example:\n\n        >>> x = np.float32(5*0.99999999)\n        >>> x\n        5.0\n\n\n        Examples\n        --------\n        Draw samples from the distribution:\n\n        >>> s = np.random.uniform(-1,0,1000)\n\n        All values are within the given interval:\n\n        >>> np.all(s >= -1)\n        True\n        >>> np.all(s < 0)\n        True\n\n        Display the histogram of the samples, along with the\n        probability density function:\n\n        >>> import matplotlib.pyplot as plt\n        >>> count, bins, ignored = plt.hist(s, 15, density=True)\n        >>> plt.plot(bins, np.ones_like(bins), linewidth=2, color='r')\n        >>> plt.show()\n\n        ",
                                        "value": 85.95565924192321
                                    }
                                },
                                {
                                    "name": "-1",
                                    "attributes": {
                                        "type": "constant"
                                    }
                                }
                            ]
                        },
                        {
                            "name": "Protected Division",
                            "attributes": {
                                "type": "primitive",
                                "arity": 2,
                                "doc": "(function) def protected_div(arg0: float, arg1: float) -> float\nSafely performs division between two numbers.\n    Divides `arg0` by `arg1` and returns the result. If a division by zero occurs,\n    returns 1 instead of raising an exception.\n    Args:\n        arg0 (Primitive): The numerator.\n        arg1 (Primitive): The denominator.\n    Returns:\n        Primitive: The result of the division, or 1 if `arg1` is zero.",
                                "returnType": "float"
                            },
                            "children": [
                                {
                                    "name": "IN_forehead_height_cm",
                                    "attributes": {
                                        "type": "variable"
                                    }
                                },
                                {
                                    "name": "Random Normal (0 Mean)",
                                    "attributes": {
                                        "type": "ephemeral",
                                        "arity": 0,
                                        "returnType": "float",
                                        "doc": "\n        normal(loc=0.0, scale=1.0, size=None)\n\n        Draw random samples from a normal (Gaussian) distribution.\n\n        The probability density function of the normal distribution, first\n        derived by De Moivre and 200 years later by both Gauss and Laplace\n        independently [2]_, is often called the bell curve because of\n        its characteristic shape (see the example below).\n\n        The normal distributions occurs often in nature.  For example, it\n        describes the commonly occurring distribution of samples influenced\n        by a large number of tiny, random disturbances, each with its own\n        unique distribution [2]_.\n\n        .. note::\n            New code should use the `~numpy.random.Generator.normal`\n            method of a `~numpy.random.Generator` instance instead;\n            please see the :ref:`random-quick-start`.\n\n        Parameters\n        ----------\n        loc : float or array_like of floats\n            Mean (\"centre\") of the distribution.\n        scale : float or array_like of floats\n            Standard deviation (spread or \"width\") of the distribution. Must be\n            non-negative.\n        size : int or tuple of ints, optional\n            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n            ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n            a single value is returned if ``loc`` and ``scale`` are both scalars.\n            Otherwise, ``np.broadcast(loc, scale).size`` samples are drawn.\n\n        Returns\n        -------\n        out : ndarray or scalar\n            Drawn samples from the parameterized normal distribution.\n\n        See Also\n        --------\n        scipy.stats.norm : probability density function, distribution or\n            cumulative density function, etc.\n        random.Generator.normal: which should be used for new code.\n\n        Notes\n        -----\n        The probability density for the Gaussian distribution is\n\n        .. math:: p(x) = \\frac{1}{\\sqrt{ 2 \\pi \\sigma^2 }}\n                         e^{ - \\frac{ (x - \\mu)^2 } {2 \\sigma^2} },\n\n        where :math:`\\mu` is the mean and :math:`\\sigma` the standard\n        deviation. The square of the standard deviation, :math:`\\sigma^2`,\n        is called the variance.\n\n        The function has its peak at the mean, and its \"spread\" increases with\n        the standard deviation (the function reaches 0.607 times its maximum at\n        :math:`x + \\sigma` and :math:`x - \\sigma` [2]_).  This implies that\n        normal is more likely to return samples lying close to the mean, rather\n        than those far away.\n\n        References\n        ----------\n        .. [1] Wikipedia, \"Normal distribution\",\n               https://en.wikipedia.org/wiki/Normal_distribution\n        .. [2] P. R. Peebles Jr., \"Central Limit Theorem\" in \"Probability,\n               Random Variables and Random Signal Principles\", 4th ed., 2001,\n               pp. 51, 51, 125.\n\n        Examples\n        --------\n        Draw samples from the distribution:\n\n        >>> mu, sigma = 0, 0.1 # mean and standard deviation\n        >>> s = np.random.normal(mu, sigma, 1000)\n\n        Verify the mean and the variance:\n\n        >>> abs(mu - np.mean(s))\n        0.0  # may vary\n\n        >>> abs(sigma - np.std(s, ddof=1))\n        0.1  # may vary\n\n        Display the histogram of the samples, along with\n        the probability density function:\n\n        >>> import matplotlib.pyplot as plt\n        >>> count, bins, ignored = plt.hist(s, 30, density=True)\n        >>> plt.plot(bins, 1/(sigma * np.sqrt(2 * np.pi)) *\n        ...                np.exp( - (bins - mu)**2 / (2 * sigma**2) ),\n        ...          linewidth=2, color='r')\n        >>> plt.show()\n\n        Two-by-four array of samples from the normal distribution with\n        mean 3 and standard deviation 2.5:\n\n        >>> np.random.normal(3, 2.5, size=(2, 4))\n        array([[-4.49401501,  4.00950034, -1.81814867,  7.29718677],   # random\n               [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random\n\n        ",
                                        "value": 1.4820008916379352
                                    }
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}