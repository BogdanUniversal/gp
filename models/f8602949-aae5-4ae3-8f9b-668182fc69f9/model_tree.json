{
    "name": "Addition",
    "attributes": {
        "type": "primitive",
        "arity": 2,
        "doc": "(function) def add(arg0: float, arg1: float) -> float\nSame as a + b.",
        "returnType": "float"
    },
    "children": [
        {
            "name": "Addition",
            "attributes": {
                "type": "primitive",
                "arity": 2,
                "doc": "(function) def add(arg0: float, arg1: float) -> float\nSame as a + b.",
                "returnType": "float"
            },
            "children": [
                {
                    "name": "Substraction",
                    "attributes": {
                        "type": "primitive",
                        "arity": 2,
                        "doc": "(function) def sub(arg0: float, arg1: float) -> float\nSame as a - b.",
                        "returnType": "float"
                    },
                    "children": [
                        {
                            "name": "IN3",
                            "attributes": {
                                "type": "variable"
                            }
                        },
                        {
                            "name": "Random Uniform (-1 - 1)",
                            "attributes": {
                                "type": "ephemeral",
                                "arity": 0,
                                "returnType": "float",
                                "doc": "\n        uniform(low=0.0, high=1.0, size=None)\n\n        Draw samples from a uniform distribution.\n\n        Samples are uniformly distributed over the half-open interval\n        ``[low, high)`` (includes low, but excludes high).  In other words,\n        any value within the given interval is equally likely to be drawn\n        by `uniform`.\n\n        .. note::\n            New code should use the `~numpy.random.Generator.uniform`\n            method of a `~numpy.random.Generator` instance instead;\n            please see the :ref:`random-quick-start`.\n\n        Parameters\n        ----------\n        low : float or array_like of floats, optional\n            Lower boundary of the output interval.  All values generated will be\n            greater than or equal to low.  The default value is 0.\n        high : float or array_like of floats\n            Upper boundary of the output interval.  All values generated will be\n            less than or equal to high.  The high limit may be included in the \n            returned array of floats due to floating-point rounding in the \n            equation ``low + (high-low) * random_sample()``.  The default value \n            is 1.0.\n        size : int or tuple of ints, optional\n            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n            ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n            a single value is returned if ``low`` and ``high`` are both scalars.\n            Otherwise, ``np.broadcast(low, high).size`` samples are drawn.\n\n        Returns\n        -------\n        out : ndarray or scalar\n            Drawn samples from the parameterized uniform distribution.\n\n        See Also\n        --------\n        randint : Discrete uniform distribution, yielding integers.\n        random_integers : Discrete uniform distribution over the closed\n                          interval ``[low, high]``.\n        random_sample : Floats uniformly distributed over ``[0, 1)``.\n        random : Alias for `random_sample`.\n        rand : Convenience function that accepts dimensions as input, e.g.,\n               ``rand(2,2)`` would generate a 2-by-2 array of floats,\n               uniformly distributed over ``[0, 1)``.\n        random.Generator.uniform: which should be used for new code.\n\n        Notes\n        -----\n        The probability density function of the uniform distribution is\n\n        .. math:: p(x) = \\frac{1}{b - a}\n\n        anywhere within the interval ``[a, b)``, and zero elsewhere.\n\n        When ``high`` == ``low``, values of ``low`` will be returned.\n        If ``high`` < ``low``, the results are officially undefined\n        and may eventually raise an error, i.e. do not rely on this\n        function to behave when passed arguments satisfying that\n        inequality condition. The ``high`` limit may be included in the\n        returned array of floats due to floating-point rounding in the\n        equation ``low + (high-low) * random_sample()``. For example:\n\n        >>> x = np.float32(5*0.99999999)\n        >>> x\n        5.0\n\n\n        Examples\n        --------\n        Draw samples from the distribution:\n\n        >>> s = np.random.uniform(-1,0,1000)\n\n        All values are within the given interval:\n\n        >>> np.all(s >= -1)\n        True\n        >>> np.all(s < 0)\n        True\n\n        Display the histogram of the samples, along with the\n        probability density function:\n\n        >>> import matplotlib.pyplot as plt\n        >>> count, bins, ignored = plt.hist(s, 15, density=True)\n        >>> plt.plot(bins, np.ones_like(bins), linewidth=2, color='r')\n        >>> plt.show()\n\n        ",
                                "value": -0.14207234906696797
                            }
                        }
                    ]
                },
                {
                    "name": "If Then Else",
                    "attributes": {
                        "type": "primitive",
                        "arity": 3,
                        "doc": "(function) def if_then_else(arg0: bool, arg1: float, arg2: float) -> float\nReturns one of two outputs based on the truth value of the input.\n    Args:\n        arg0 (bool): Condition to evaluate. If True, arg1 is returned; otherwise, arg2 is returned.\n        arg1 (Primitive): Value to return if input is True.\n        arg2 (Primitive): Value to return if input is False.\n    Returns:\n        Any: output1 if input is True, otherwise arg2.",
                        "returnType": "float"
                    },
                    "children": [
                        {
                            "name": "False",
                            "attributes": {
                                "type": "constant"
                            }
                        },
                        {
                            "name": "IN1",
                            "attributes": {
                                "type": "variable"
                            }
                        },
                        {
                            "name": "Addition",
                            "attributes": {
                                "type": "primitive",
                                "arity": 2,
                                "doc": "(function) def add(arg0: float, arg1: float) -> float\nSame as a + b.",
                                "returnType": "float"
                            },
                            "children": [
                                {
                                    "name": "IN3",
                                    "attributes": {
                                        "type": "variable"
                                    }
                                },
                                {
                                    "name": "If Then Else",
                                    "attributes": {
                                        "type": "primitive",
                                        "arity": 3,
                                        "doc": "(function) def if_then_else(arg0: bool, arg1: float, arg2: float) -> float\nReturns one of two outputs based on the truth value of the input.\n    Args:\n        arg0 (bool): Condition to evaluate. If True, arg1 is returned; otherwise, arg2 is returned.\n        arg1 (Primitive): Value to return if input is True.\n        arg2 (Primitive): Value to return if input is False.\n    Returns:\n        Any: output1 if input is True, otherwise arg2.",
                                        "returnType": "float"
                                    },
                                    "children": [
                                        {
                                            "name": "False",
                                            "attributes": {
                                                "type": "constant"
                                            }
                                        },
                                        {
                                            "name": "IN3",
                                            "attributes": {
                                                "type": "variable"
                                            }
                                        },
                                        {
                                            "name": "IN4",
                                            "attributes": {
                                                "type": "variable"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "name": "Addition",
            "attributes": {
                "type": "primitive",
                "arity": 2,
                "doc": "(function) def add(arg0: float, arg1: float) -> float\nSame as a + b.",
                "returnType": "float"
            },
            "children": [
                {
                    "name": "Addition",
                    "attributes": {
                        "type": "primitive",
                        "arity": 2,
                        "doc": "(function) def add(arg0: float, arg1: float) -> float\nSame as a + b.",
                        "returnType": "float"
                    },
                    "children": [
                        {
                            "name": "Substraction",
                            "attributes": {
                                "type": "primitive",
                                "arity": 2,
                                "doc": "(function) def sub(arg0: float, arg1: float) -> float\nSame as a - b.",
                                "returnType": "float"
                            },
                            "children": [
                                {
                                    "name": "IN3",
                                    "attributes": {
                                        "type": "variable"
                                    }
                                },
                                {
                                    "name": "Protected Division",
                                    "attributes": {
                                        "type": "primitive",
                                        "arity": 2,
                                        "doc": "(function) def protected_div(arg0: float, arg1: float) -> float\nSafely performs division between two numbers.\n    Divides `arg0` by `arg1` and returns the result. If a division by zero occurs,\n    returns 1 instead of raising an exception.\n    Args:\n        arg0 (Primitive): The numerator.\n        arg1 (Primitive): The denominator.\n    Returns:\n        Primitive: The result of the division, or 1 if `arg1` is zero.",
                                        "returnType": "float"
                                    },
                                    "children": [
                                        {
                                            "name": "Multiplication",
                                            "attributes": {
                                                "type": "primitive",
                                                "arity": 2,
                                                "doc": "(function) def mul(arg0: float, arg1: float) -> float\nSame as a * b.",
                                                "returnType": "float"
                                            },
                                            "children": [
                                                {
                                                    "name": "IN2",
                                                    "attributes": {
                                                        "type": "variable"
                                                    }
                                                },
                                                {
                                                    "name": "Random Uniform (-1 - 1)",
                                                    "attributes": {
                                                        "type": "ephemeral",
                                                        "arity": 0,
                                                        "returnType": "float",
                                                        "doc": "\n        uniform(low=0.0, high=1.0, size=None)\n\n        Draw samples from a uniform distribution.\n\n        Samples are uniformly distributed over the half-open interval\n        ``[low, high)`` (includes low, but excludes high).  In other words,\n        any value within the given interval is equally likely to be drawn\n        by `uniform`.\n\n        .. note::\n            New code should use the `~numpy.random.Generator.uniform`\n            method of a `~numpy.random.Generator` instance instead;\n            please see the :ref:`random-quick-start`.\n\n        Parameters\n        ----------\n        low : float or array_like of floats, optional\n            Lower boundary of the output interval.  All values generated will be\n            greater than or equal to low.  The default value is 0.\n        high : float or array_like of floats\n            Upper boundary of the output interval.  All values generated will be\n            less than or equal to high.  The high limit may be included in the \n            returned array of floats due to floating-point rounding in the \n            equation ``low + (high-low) * random_sample()``.  The default value \n            is 1.0.\n        size : int or tuple of ints, optional\n            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n            ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n            a single value is returned if ``low`` and ``high`` are both scalars.\n            Otherwise, ``np.broadcast(low, high).size`` samples are drawn.\n\n        Returns\n        -------\n        out : ndarray or scalar\n            Drawn samples from the parameterized uniform distribution.\n\n        See Also\n        --------\n        randint : Discrete uniform distribution, yielding integers.\n        random_integers : Discrete uniform distribution over the closed\n                          interval ``[low, high]``.\n        random_sample : Floats uniformly distributed over ``[0, 1)``.\n        random : Alias for `random_sample`.\n        rand : Convenience function that accepts dimensions as input, e.g.,\n               ``rand(2,2)`` would generate a 2-by-2 array of floats,\n               uniformly distributed over ``[0, 1)``.\n        random.Generator.uniform: which should be used for new code.\n\n        Notes\n        -----\n        The probability density function of the uniform distribution is\n\n        .. math:: p(x) = \\frac{1}{b - a}\n\n        anywhere within the interval ``[a, b)``, and zero elsewhere.\n\n        When ``high`` == ``low``, values of ``low`` will be returned.\n        If ``high`` < ``low``, the results are officially undefined\n        and may eventually raise an error, i.e. do not rely on this\n        function to behave when passed arguments satisfying that\n        inequality condition. The ``high`` limit may be included in the\n        returned array of floats due to floating-point rounding in the\n        equation ``low + (high-low) * random_sample()``. For example:\n\n        >>> x = np.float32(5*0.99999999)\n        >>> x\n        5.0\n\n\n        Examples\n        --------\n        Draw samples from the distribution:\n\n        >>> s = np.random.uniform(-1,0,1000)\n\n        All values are within the given interval:\n\n        >>> np.all(s >= -1)\n        True\n        >>> np.all(s < 0)\n        True\n\n        Display the histogram of the samples, along with the\n        probability density function:\n\n        >>> import matplotlib.pyplot as plt\n        >>> count, bins, ignored = plt.hist(s, 15, density=True)\n        >>> plt.plot(bins, np.ones_like(bins), linewidth=2, color='r')\n        >>> plt.show()\n\n        ",
                                                        "value": 0.017636620128801628
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            "name": "If Then Else",
                                            "attributes": {
                                                "type": "primitive",
                                                "arity": 3,
                                                "doc": "(function) def if_then_else(arg0: bool, arg1: float, arg2: float) -> float\nReturns one of two outputs based on the truth value of the input.\n    Args:\n        arg0 (bool): Condition to evaluate. If True, arg1 is returned; otherwise, arg2 is returned.\n        arg1 (Primitive): Value to return if input is True.\n        arg2 (Primitive): Value to return if input is False.\n    Returns:\n        Any: output1 if input is True, otherwise arg2.",
                                                "returnType": "float"
                                            },
                                            "children": [
                                                {
                                                    "name": "False",
                                                    "attributes": {
                                                        "type": "constant"
                                                    }
                                                },
                                                {
                                                    "name": "Random Pareto (1 Shape)",
                                                    "attributes": {
                                                        "type": "ephemeral",
                                                        "arity": 0,
                                                        "returnType": "float",
                                                        "doc": "\n        pareto(a, size=None)\n\n        Draw samples from a Pareto II or Lomax distribution with\n        specified shape.\n\n        The Lomax or Pareto II distribution is a shifted Pareto\n        distribution. The classical Pareto distribution can be\n        obtained from the Lomax distribution by adding 1 and\n        multiplying by the scale parameter ``m`` (see Notes).  The\n        smallest value of the Lomax distribution is zero while for the\n        classical Pareto distribution it is ``mu``, where the standard\n        Pareto distribution has location ``mu = 1``.  Lomax can also\n        be considered as a simplified version of the Generalized\n        Pareto distribution (available in SciPy), with the scale set\n        to one and the location set to zero.\n\n        The Pareto distribution must be greater than zero, and is\n        unbounded above.  It is also known as the \"80-20 rule\".  In\n        this distribution, 80 percent of the weights are in the lowest\n        20 percent of the range, while the other 20 percent fill the\n        remaining 80 percent of the range.\n\n        .. note::\n            New code should use the `~numpy.random.Generator.pareto`\n            method of a `~numpy.random.Generator` instance instead;\n            please see the :ref:`random-quick-start`.\n\n        Parameters\n        ----------\n        a : float or array_like of floats\n            Shape of the distribution. Must be positive.\n        size : int or tuple of ints, optional\n            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n            ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n            a single value is returned if ``a`` is a scalar.  Otherwise,\n            ``np.array(a).size`` samples are drawn.\n\n        Returns\n        -------\n        out : ndarray or scalar\n            Drawn samples from the parameterized Pareto distribution.\n\n        See Also\n        --------\n        scipy.stats.lomax : probability density function, distribution or\n            cumulative density function, etc.\n        scipy.stats.genpareto : probability density function, distribution or\n            cumulative density function, etc.\n        random.Generator.pareto: which should be used for new code.\n\n        Notes\n        -----\n        The probability density for the Pareto distribution is\n\n        .. math:: p(x) = \\frac{am^a}{x^{a+1}}\n\n        where :math:`a` is the shape and :math:`m` the scale.\n\n        The Pareto distribution, named after the Italian economist\n        Vilfredo Pareto, is a power law probability distribution\n        useful in many real world problems.  Outside the field of\n        economics it is generally referred to as the Bradford\n        distribution. Pareto developed the distribution to describe\n        the distribution of wealth in an economy.  It has also found\n        use in insurance, web page access statistics, oil field sizes,\n        and many other problems, including the download frequency for\n        projects in Sourceforge [1]_.  It is one of the so-called\n        \"fat-tailed\" distributions.\n\n        References\n        ----------\n        .. [1] Francis Hunt and Paul Johnson, On the Pareto Distribution of\n               Sourceforge projects.\n        .. [2] Pareto, V. (1896). Course of Political Economy. Lausanne.\n        .. [3] Reiss, R.D., Thomas, M.(2001), Statistical Analysis of Extreme\n               Values, Birkhauser Verlag, Basel, pp 23-30.\n        .. [4] Wikipedia, \"Pareto distribution\",\n               https://en.wikipedia.org/wiki/Pareto_distribution\n\n        Examples\n        --------\n        Draw samples from the distribution:\n\n        >>> a, m = 3., 2.  # shape and mode\n        >>> s = (np.random.pareto(a, 1000) + 1) * m\n\n        Display the histogram of the samples, along with the probability\n        density function:\n\n        >>> import matplotlib.pyplot as plt\n        >>> count, bins, _ = plt.hist(s, 100, density=True)\n        >>> fit = a*m**a / bins**(a+1)\n        >>> plt.plot(bins, max(count)*fit/max(fit), linewidth=2, color='r')\n        >>> plt.show()\n\n        ",
                                                        "value": 0.07119403862643203
                                                    }
                                                },
                                                {
                                                    "name": "-1",
                                                    "attributes": {
                                                        "type": "constant"
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "If Then Else",
                            "attributes": {
                                "type": "primitive",
                                "arity": 3,
                                "doc": "(function) def if_then_else(arg0: bool, arg1: float, arg2: float) -> float\nReturns one of two outputs based on the truth value of the input.\n    Args:\n        arg0 (bool): Condition to evaluate. If True, arg1 is returned; otherwise, arg2 is returned.\n        arg1 (Primitive): Value to return if input is True.\n        arg2 (Primitive): Value to return if input is False.\n    Returns:\n        Any: output1 if input is True, otherwise arg2.",
                                "returnType": "float"
                            },
                            "children": [
                                {
                                    "name": "False",
                                    "attributes": {
                                        "type": "constant"
                                    }
                                },
                                {
                                    "name": "IN2",
                                    "attributes": {
                                        "type": "variable"
                                    }
                                },
                                {
                                    "name": "IN3",
                                    "attributes": {
                                        "type": "variable"
                                    }
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Addition",
                    "attributes": {
                        "type": "primitive",
                        "arity": 2,
                        "doc": "(function) def add(arg0: float, arg1: float) -> float\nSame as a + b.",
                        "returnType": "float"
                    },
                    "children": [
                        {
                            "name": "IN3",
                            "attributes": {
                                "type": "variable"
                            }
                        },
                        {
                            "name": "IN3",
                            "attributes": {
                                "type": "variable"
                            }
                        }
                    ]
                }
            ]
        }
    ]
}